const express = require('express');
const fs = require('fs');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

const SECRET = 'my-secret-key';

let users = JSON.parse(fs.readFileSync('./data/users.json', 'utf-8'));
let codes = JSON.parse(fs.readFileSync('./data/codes.json', 'utf-8'));
let rewards = JSON.parse(fs.readFileSync('./data/rewards.json', 'utf-8'));

// ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
app.post('/api/register', async (req, res) => {
  const { username, password } = req.body;
  if (users[username]) return res.status(400).json({ msg: '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

  const hashed = await bcrypt.hash(password, 10);
  users[username] = { password: hashed, points: 0, history: [], role: "user" };

  fs.writeFileSync('./data/users.json', JSON.stringify(users, null, 2));
  res.json({ msg: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
});

// ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users[username];
  if (!user || !(await bcrypt.compare(password, user.password)))
    return res.status(401).json({ msg: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ú‡∏¥‡∏î' });

  const token = jwt.sign({ username }, SECRET, { expiresIn: '2h' });
  res.json({ token });
});

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
app.post('/api/check-code', (req, res) => {
  const auth = req.headers.authorization;
  const token = auth && auth.split(' ')[1];
  if (!token) return res.status(401).json({ msg: 'no token' });

  try {
    const decoded = jwt.verify(token, SECRET);
    const reward = codes[req.body.code];
    if (!reward) return res.status(404).json({ msg: '‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const user = users[decoded.username];
    user.points += reward.points;
    user.history.push({ code: req.body.code, date: new Date().toISOString() });
    fs.writeFileSync('./data/users.json', JSON.stringify(users, null, 2));
    res.json({ msg: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', reward, points: user.points });
  } catch {
    res.status(403).json({ msg: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
});

// me
app.get('/api/me', (req, res) => {
  const auth = req.headers.authorization;
  const token = auth && auth.split(' ')[1];
  if (!token) return res.status(401).json({ msg: 'no token' });

  try {
    const decoded = jwt.verify(token, SECRET);
    const user = users[decoded.username];
    res.json({ username: decoded.username, points: user.points, history: user.history, role: user.role });
  } catch {
    res.status(403).json({ msg: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
});

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
app.get('/api/rewards', (req, res) => {
  res.json(rewards);
});

// ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.post('/api/admin/add-points', (req, res) => {
  const auth = req.headers.authorization;
  const token = auth && auth.split(' ')[1];
  if (!token) return res.status(401).json({ msg: 'no token' });

  try {
    const decoded = jwt.verify(token, SECRET);
    const currentUser = users[decoded.username];
    if (currentUser.role !== 'admin') return res.status(403).json({ msg: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' });

    const { username, points } = req.body;
    if (!users[username]) return res.status(404).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });

    users[username].points += points;
    fs.writeFileSync('./data/users.json', JSON.stringify(users, null, 2));
    res.json({ msg: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡πÉ‡∏´‡πâ ${username} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß` });
  } catch {
    res.status(403).json({ msg: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
});

// ‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
app.post('/api/redeem', (req, res) => {
  const auth = req.headers.authorization;
  const token = auth && auth.split(' ')[1];
  if (!token) return res.status(401).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö token' });

  try {
    const decoded = jwt.verify(token, SECRET);
    const user = users[decoded.username];
    const { rewardName } = req.body;

    const reward = rewards[rewardName];
    if (!reward) return res.status(404).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•' });

    if (reward.quantity <= 0) {
      return res.status(400).json({ msg: '‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß' });
    }

    if (user.points < reward.points) {
      return res.status(400).json({ msg: '‡πÅ‡∏ï‡πâ‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠' });
    }

    user.points -= reward.points;
    reward.quantity -= 1;
    user.history = user.history || [];
    user.history.push({
      code: rewardName,
      date: new Date().toISOString()
    });

    fs.writeFileSync('./data/users.json', JSON.stringify(users, null, 2));
    fs.writeFileSync('./data/rewards.json', JSON.stringify(rewards, null, 2));

    res.json({ msg: '‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
  } catch {
    res.status(403).json({ msg: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (admin)
app.post('/api/update-quantity', (req, res) => {
  const { rewardName, quantity } = req.body;

  if (!rewards[rewardName]) {
    return res.status(404).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•' });
  }

  rewards[rewardName].quantity = quantity;

  fs.writeFileSync('./data/rewards.json', JSON.stringify(rewards, null, 2));
  res.json({ msg: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
});

app.listen(3000, () => console.log('üöÄ Server running on http://localhost:3000'));

// ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown)
app.get('/api/all-users', (req, res) => {
  res.json(users); // users ‡πÄ‡∏õ‡πá‡∏ô object: { username: { ... }, ... }
});

app.get('/api/all-users', (req, res) => {
  res.json(users);
});

// ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (reset)
app.post('/api/reset-password', async (req, res) => {
  const { username, newPassword } = req.body;

  if (!users[username]) return res.status(404).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ' });

  const hashed = await bcrypt.hash(newPassword, 10);
  users[username].password = hashed;

  fs.writeFileSync('./data/users.json', JSON.stringify(users, null, 2));
  res.json({ msg: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });
});
